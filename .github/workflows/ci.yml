name: Build and test flake outputs
on:
  push:
  workflow_call:
    inputs:
      branch:
        description: Branch name to build on
        default: ''
        required: false
        type: string
    secrets:
      CACHIX_AUTH_TOKEN:
        required: true

jobs:
  nix:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        system:
          - aarch64
        nix-command:
          #- flake check # FIXME: temporarily disabled because of failing nixGL evaluation on aarch64
          - fmt
          - eval .#apps.$_system.ci-build.program
          - eval .#apps.$_system.setup.program

        include:
          - nix-command: run .#ci-build -- nixOnDroidConfigurations.sams9.activationPackage
            system: aarch64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}

      - name: Install nix
        uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            keep-going = true
            show-trace = true

      - name: Setup cachix
        uses: cachix/cachix-action@v12
        with:
          name: 573-bc
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Build command (aarch64)
        if: matrix.system == 'aarch64'
        # FIXME: use upstream once --tty is removed
        #uses: uraimo/run-on-arch-action@v2
        uses: Gerschtli/run-on-arch-action@tty
        with:
          arch: aarch64
          distro: alpine_latest
          dockerRunArgs: --volume /nix:/nix
          install: apk --no-cache add curl git xz
          env: |
            _system: ${{ matrix.system }}-linux
            CACHIX_AUTH_TOKEN: ${{ secrets.CACHIX_AUTH_TOKEN }}
            USER: root
          run: |
            set -euo pipefail

            mkdir -p /etc/nix

            cat <<EOF >> /etc/nix/nix.conf
            max-jobs = auto
            trusted-users = root
            experimental-features = nix-command flakes
            build-users-group =
            keep-going = true
            show-trace = true
            EOF

            echo "::group::Install nix"
            INSTALL_FILE="install"
            curl \
              --silent \
              --show-error \
              --output "$INSTALL_FILE" \
              --retry 5 \
              --retry-all-errors \
              --fail \
              --location \
              "https://nixos.org/nix/install"

            sh "$INSTALL_FILE" --no-channel-add
            rm "$INSTALL_FILE"
            . ${HOME}/.nix-profile/etc/profile.d/nix.sh

            # FIXME: setting build-hook is needed because default hook `nix __build-remote` is not available
            function build_hook() {
              local nix_path="$(which nix)"
              echo "${nix_path/bin\/nix/libexec/nix/build-remote}"
            }
            echo "build-hook = $(build_hook)" >> /etc/nix/nix.conf


            echo "::group::Setup cachix"
            nix profile install nixpkgs#cachix
            cachix use gerschtli
            cachix use nix-on-droid
            cachix use 573-bc
            cachix use nix-community


            echo "::group::Build command"
            git config --global --add safe.directory "$(pwd)"

            cachix watch-exec 573-bc \
            nix -- ${{ matrix.nix-command }}


            ${{ github.ref == 'refs/heads/master' && inputs.branch == '' && matrix.deploy-spec && '
            echo "::group::Build spec"
            spec="$(nix build --print-out-paths "$DEPLOY_SPEC")"

            echo "::group::Deploy spec"
            cachix push 573-bc "$spec"
            cachix deploy activate "$spec"
            ' || '
            echo "::group::Skip spec deploy"
            ' }}

      - name: Build command (x86_64)
        if: matrix.system == 'x86_64'
        env:
          _system: ${{ matrix.system }}-linux
        run: nix ${{ matrix.nix-command }}

      - name: Deploy cachix-agent spec (x86_64)
        if: matrix.system == 'x86_64' && github.ref == 'refs/heads/master' && inputs.branch == '' && matrix.deploy-spec
        env:
          CACHIX_ACTIVATE_TOKEN: ${{ secrets.CACHIX_ACTIVATE_TOKEN }}
        run: |
          echo "::group::Build spec"
          spec="$(nix build --print-out-paths "${{ matrix.deploy-spec }}")"

          echo "::group::Deploy spec"
          cachix push 573-bc "$spec"
          cachix deploy activate "$spec"

# vim: set sw=2:

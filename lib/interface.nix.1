{ config, lib, pkgs, ... }@args:

with lib;

let

  fetchBitBucket = import ../util/fetchBitBucket.nix pkgs;
  callPackage = callPackageWith (args // { inherit fetchBitBucket; });

  paths = [
    ../hardware-configuration.nix
    ./applications/auto-golden-river-jazztett.nix
    ./applications/golden-river-jazztett.nix
    ./boot.nix
    ./desktop.nix
    ./dev.nix
    ./general.nix
    ./server.nix
    ./services/httpd.nix
    ./services/mysql.nix
    ./services/teamspeak.nix
    ./xserver.nix
  ];


  pathTo = name: default: path:
    let package = callPackage path { }; in
    if package ? ${name}
    then package.${name}
    else default;

  pathToImports = pathTo "imports" [];
  pathToOptions = pathTo "options" {};
  pathToConfig = pathTo "config" {};

  imports = concatMap pathToImports paths;

  options = foldl
    (x: y: y // x)
    {}
    (map pathToOptions paths );

  config = mkMerge
    (map pathToConfig paths);

in

{
  inherit imports options config;
}

#!/usr/bin/env bash
set -e

available() {
    hash "${1}" > /dev/null 2>&1
}

get_sudo_prefix() {
    if ! is_root; then
        echo "sudo"
    fi
}

has_unit_enabled() {
    [[ "$(systemctl is-enabled "${1}" 2> /dev/null)" == "enabled" ]]
}

is_nixos() {
    [[ -f "/etc/NIXOS" ]]
}

is_root() {
    [[ $(id -u) == 0 ]]
}

log() {
    echo
    echo -e "\033[00;35m===================== \033[00;32m SYSTEM-UPDATE \033[00;35m ======================\033[0m"
    echo -e "\033[00;35m============================================================\033[0m"
    echo -e "[\033[00;34m${1}\033[0m] => ${2}"
    echo
}

pull_changes() {
    if [[ -d "${2}" && -w "${2}" ]]; then
        log "pull changes" "update ${1} project"
        git -C "${2}" pull --prune
    fi
}

pull_changes_ssh() {
    local ssh_path="modules/secrets/ssh/modules"

    if [[ -d "${1}/${ssh_path}" ]]; then
        for ssh_module in "${1}/${ssh_path}/"*; do
            pull_changes "ssh $(basename "${ssh_module}")" "${ssh_module}"
        done
    fi
}

# add key
if available keychain; then
    log "keychain" "add key"
    keychain "${HOME}/.ssh/modules/vcs/keys/id_rsa.vcs"
else
    log "ssh-agent" "add key"
    ssh-add "${HOME}/.ssh/modules/vcs/keys/id_rsa.vcs"
fi


# update ubuntu
if available apt; then
    log "apt" "update"
    "$(get_sudo_prefix)" apt update
    log "apt" "upgrade"
    "$(get_sudo_prefix)" apt upgrade -y
    log "apt" "autoclean"
    "$(get_sudo_prefix)" apt autoclean -y
    log "apt" "autoremove"
    "$(get_sudo_prefix)" apt autoremove -y
fi

if available snap && $(snap list > /dev/null 2>&1); then
    log "snap" "refresh"
    "$(get_sudo_prefix)" snap refresh
fi


# update projects
nixos="/etc/nixos"
nixos_hm="${nixos}/home-manager-configurations"
dotfiles="${HOME}/.dotfiles"
dotfiles_hm="${dotfiles}/home-manager/home-manager-configurations"

pull_changes "nixos"        "${nixos}"
pull_changes "home-manager" "${nixos_hm}"
pull_changes_ssh            "${nixos_hm}"
pull_changes "dotfiles"     "${dotfiles}"
pull_changes "gpg"          "${dotfiles}/gpg"
pull_changes "home-manager" "${dotfiles_hm}"
pull_changes_ssh            "${dotfiles_hm}"
pull_changes "pass"         "${HOME}/.password-store"


# dotfiles bootstrap
if [[ -d "${dotfiles}" ]]; then
    log "dotfiles" "run bootstrap"
    ${dotfiles}/bootstrap.sh
fi


# nix updates
if [[ -r "${HOME}/.nix-channels" ]] && ! has_unit_enabled "nixos-upgrade.timer" &&
   [[ $(find /nix/var/nix/profiles/per-user -type l -iname "channels-*" -mtime -7 | wc -l) == 0 ]]; then
    log "nix" "update nix-channel"
    nix-channel --update
fi

if is_nixos && is_root; then
    log "nix" "builds nixos configuration"
    nixos-rebuild build

    log "nix" "compares nixos configurations"
    # see https://github.com/madjar/nox/issues/63#issuecomment-303280129
    nox-update --quiet /run/current-system result | \
        grep -v '\.drv : $' | \
        sed 's|^ */nix/store/[a-z0-9]*-||' | \
        sort -u
    rm result

    log "nix" "switches nixos configuration"
    nixos-rebuild switch
fi

if [[ -r "${HOME}/.config/nixpkgs/home.nix" ]] && available home-manager; then
    log "nix" "home-manager switch"
    home-manager switch -2 -b hm-bak
fi


# nix cleanup
# no cleanup for non root users on NixOS
if ! is_nixos || is_root; then
    if ! has_unit_enabled "nix-gc.timer"; then
        log "nix" "nix-collect-garbage"
        nix-collect-garbage --delete-older-than 14d 2> /dev/null
    fi

    if ! has_unit_enabled "nix-optimise.timer" && [[ "$(whoami)" != "nix-on-droid" ]]; then
        log "nix" "nix-store --optimise"
        nix-store --optimise
    fi
fi
